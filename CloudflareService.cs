using System.Net.Http.Json;
using System.Text;
using CloudFlare.Client;
using CloudFlare.Client.Api.Result;
using CloudFlare.Client.Api.Zones.DnsRecord;
using CloudFlare.Client.Enumerators;

namespace PterodactylToCloudflareDNS;

public static class CloudflareService
{
	private const int DnsAlreadyExists = 81058;

	private static string? _cfApiKey;
	private static string? _zoneId;
	private static string? _panelUrl;
	private static string? _mlApiKey;

	private static CloudFlareClient? _cloudFlareClient;

	private static readonly List<Server> Servers = [];

	public static async Task Run(Dictionary<string, string?> configuration)
	{
		configuration.TryGetValue("CLOUDFLAREAPIKEY", out _cfApiKey);
		configuration.TryGetValue("CLOUDFLAREZONEID", out _zoneId);
		configuration.TryGetValue("PTERODACTYLAPIURL", out _panelUrl);
		configuration.TryGetValue("PTERODACTYLAPIKEY", out _mlApiKey);

		try
		{
			_cloudFlareClient = new CloudFlareClient(_cfApiKey);
		}
		catch (Exception ex)
		{
			await Logging.Log(LogSeverity.Error, "Cloudflare", $"Client creation failed: {ex.Message}");
		}

		await Logging.Log(LogSeverity.Info, "Cloudflare", "Initialize");
		var isValid = await CheckValidity();
		if (!isValid)
		{
			await Logging.Log(LogSeverity.Error, "Cloudflare",
				"Could not verify Cloudflare configuration. Terminating.");
			return;
		}

		await Logging.Log(LogSeverity.Info, "Cloudflare", "Configuration is valid. Monitoring...");
		await MonitorForChanges();
	}

	private static async Task<bool> CheckValidity()
	{
		if (_cfApiKey == null || _zoneId == null || _cloudFlareClient == null)
			return false;

		var dnsRecord = new NewDnsRecord()
		{
			Type = DnsRecordType.A,
			Name = "ptcf",
			Content = "127.0.0.1",
			Ttl = 1,
			Proxied = false,
			Comment = "API Key Verification Record || Generated by PTCF",
		};

		try
		{
			var result = await _cloudFlareClient.Zones.DnsRecords.AddAsync(_zoneId, dnsRecord);
			return result is { Success: true } ||
			       (result.Errors.Count == 1 && result.Errors[0].Code == DnsAlreadyExists);
		}
		catch (Exception e)
		{
			await Logging.Log(LogSeverity.Error, "Cloudflare", "Error adding DnsRecord: " + e.Message);
			return false;
		}
	}

	private static async Task MonitorForChanges()
	{
		while (_cloudFlareClient != null)
		{
			await Logging.Log(LogSeverity.Debug, "CF/Monitor", $"Starting DNS refresh...");
			await UpdateServerList();
			foreach (var server in Servers)
			{
				await UpdateServer(server);
				await Task.Delay(1);
			}

			await Logging.Log(LogSeverity.Debug, "CF/Monitor", $"Finished DNS refresh...");
			await Task.Delay(TimeSpan.FromSeconds(30));
		}

		await Logging.Log(LogSeverity.Error, "CF/Monitor", "CloudFlareClient is null. Terminating.");
	}

	private static async Task UpdateServer(Server server)
	{
		var aRecordResult = await CreateARecord(server);
		var srvRecordResult = await CreateSrvRecord(server);

		var aRecordSuccess = aRecordResult?.Success == true;
		var aRecordAlreadyExists = aRecordResult?.Errors.Count == 1 &&
		                           aRecordResult.Errors[0].Code == DnsAlreadyExists;

		if ((aRecordResult is null || srvRecordResult is null || !aRecordSuccess) && !aRecordAlreadyExists)
		{
			var errorCodes = aRecordResult?.Errors is { Count: > 0 }
				? string.Join(", ", aRecordResult.Errors.Select(e => e.Code))
				: "No errors";

			await Logging.Log(LogSeverity.Warning, "CF/Monitor",
				$"Could not create A Record for: {server.Subdomain}.{server.Domain} [{errorCodes}]");
			return;
		}
		
		var errorResponse = !(srvRecordResult?.IsSuccessStatusCode ?? false)
			? await srvRecordResult!.Content.ReadFromJsonAsync<CreateSrvResponse>()
			: null;

		if (!srvRecordResult.IsSuccessStatusCode &&
		    errorResponse is not { Errors: [{ Code: DnsAlreadyExists }] })
		{
			await Logging.Log(LogSeverity.Error, "CF/Monitor",
				$"Could not create SRV Record for: {server.Subdomain}.{server.Domain} [{errorResponse?.Errors?.Aggregate("", (s, error) => $"{s}, {error.Code}")[2..]}]");
			return;
		}

		await Logging.Log(LogSeverity.Info, "CF/Monitor",
			$"Updated records for {server.Subdomain}.{server.Domain}");
	}

	private static async Task UpdateServerList()
	{
		await Logging.Log(LogSeverity.Debug, "CF/Monitor", $"Querying '{_panelUrl}/servers' with key '{_mlApiKey}'");

		var response = await Api.Get(_panelUrl + "/servers", _mlApiKey);
		if (response?.IsSuccessStatusCode ?? false)
		{
			Servers.Clear();
			var newServerList = await response.Content.ReadFromJsonAsync<Server[]>() ?? [];
			Servers.AddRange(newServerList);

			await Logging.Log(LogSeverity.Debug, "CF/Monitor", await response.Content.ReadAsStringAsync());
			await Logging.Log(LogSeverity.Debug, "CF/Monitor", $"Found {newServerList.Length} servers");
		}
		else
			await Logging.Log(LogSeverity.Warning, "CF/Monitor", "Could not reach minimal Pterodactyl API");
	}

	private static async Task<HttpResponseMessage?> CreateSrvRecord(Server server)
	{
		await Logging.Log(LogSeverity.Debug, "CF/DNS", $"Creating SRV for {server.Subdomain}.{server.Domain}");

		var srvRecord = new
		{
			type = "SRV",
			name = $"_minecraft._tcp.{server.Subdomain}",
			data = new
			{
				priority = 0,
				weight = 5,
				port = server.Port.ToString(),
				target = $"{server.Subdomain}.{server.Domain}"
			},
			ttl = 1,
			proxied = false,
			comment = "Generated by PTCF",
		};

		var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(srvRecord), Encoding.UTF8,
			"application/json");

		return await Api.Post($"https://api.cloudflare.com/client/v4/zones/{_zoneId}/dns_records", content, _cfApiKey);
	}

	private static async Task<CloudFlareResult<DnsRecord>?> CreateARecord(Server server)
	{
		if (_cloudFlareClient == null)
			return null;

		await Logging.Log(LogSeverity.Debug, "CF/DNS", $"Creating A for {server.Subdomain}.{server.Domain}");

		var aRecord = new NewDnsRecord()
		{
			Type = DnsRecordType.A,
			Name = server.Subdomain,
			Content = server.IpAddress,
			Ttl = 1,
			Proxied = false,
			Comment = "Generated by PTCF",
		};

		return await _cloudFlareClient.Zones.DnsRecords.AddAsync(_zoneId, aRecord);
	}

	private record CreateSrvResponse(
		bool Success,
		CloudFlareError[]? Errors = null,
		object? Messages = null,
		object? Result = null
	);

	private record CloudFlareError(
		int Code = 0,
		string? Message = null
	);
}