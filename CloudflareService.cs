using System.Net.Http.Json;
using System.Text;
using Newtonsoft.Json;
using CloudFlare.Client;
using CloudFlare.Client.Api.Result;
using CloudFlare.Client.Api.Zones.DnsRecord;
using CloudFlare.Client.Enumerators;
using Microsoft.AspNetCore.Identity;

namespace PterodactylToCloudflareDNS;

public static class CloudflareService
{
	private const int DnsAlreadyExists = 81058;

	private static string? _cfApiKey;
	private static string? _zoneId;
	private static string? _panelUrl;
	private static string? _mlApiKey;

	private static CloudFlareClient? _cloudFlareClient;

	public static async Task Run(Dictionary<string, string?> configuration)
	{
		configuration.TryGetValue("CLOUDFLAREAPIKEY", out _cfApiKey);
		configuration.TryGetValue("CLOUDFLAREZONEID", out _zoneId);
		configuration.TryGetValue("PTERODACTYLAPIURL", out _panelUrl);
		configuration.TryGetValue("PTERODACTYLAPIKEY", out _mlApiKey);

		try
		{
			_cloudFlareClient = new CloudFlareClient(_cfApiKey);
		}
		catch (Exception ex)
		{
			await Logging.Log(LogSeverity.Error, "Cloudflare", $"Client creation failed: {ex.Message}");
		}

		await Logging.Log(LogSeverity.Info, "Cloudflare", "Initialize");
		var isValid = await CheckValidity();
		if (!isValid)
		{
			await Logging.Log(LogSeverity.Error, "Cloudflare",
				"Could not verify Cloudflare configuration. Terminating.");
			return;
		}

		await Logging.Log(LogSeverity.Info, "Cloudflare", "Configuration is valid. Monitoring...");
		await MonitorForChanges();
	}

	private static async Task<bool> CheckValidity()
	{
		if (_cfApiKey == null || _zoneId == null || _cloudFlareClient == null)
			return false;

		var dnsRecord = new NewDnsRecord()
		{
			Type = DnsRecordType.A,
			Name = "ptcf",
			Content = "127.0.0.1",
			Ttl = 1,
			Proxied = false,
			Comment = "API Key Verification Record || Generated by PTCF",
		};

		try
		{
			var result = await _cloudFlareClient.Zones.DnsRecords.AddAsync(_zoneId, dnsRecord);
			return result is { Success: true } ||
			       (result.Errors.Count == 1 && result.Errors[0].Code == DnsAlreadyExists);
		}
		catch (Exception e)
		{
			await Logging.Log(LogSeverity.Error, "Cloudflare", "Error adding DnsRecord: " + e.Message);
			return false;
		}
	}

	private static async Task MonitorForChanges()
	{
		while (_cloudFlareClient != null)
		{
			await Logging.Log(LogSeverity.Debug, "CF/Monitor", $"Starting DNS refresh...");

			var servers = await UpdateServerList();

			// Pterodactyl API was unavailable. To avoid deleting all records, we return early.
			if (servers is [{ Port: -1 }])
			{
				await Logging.Log(LogSeverity.Debug, "CF/Monitor", "Refresh process cancelled. Continuing...");
				await Task.Delay(TimeSpan.FromSeconds(30));
				continue;
			}

			var recordsRequest = await _cloudFlareClient.Zones.DnsRecords.GetAsync(_zoneId);

			var existingRecords = recordsRequest.Result
				.Where(record => record.Type is DnsRecordType.A or DnsRecordType.Srv)
				.Where(record => record.Comment == "Generated by PTCF").ToArray();

			var srvRecordData = existingRecords.Where(r => r.Type == DnsRecordType.Srv)
				.Select(r => JsonConvert.DeserializeObject<SrvRecordData>(JsonConvert.SerializeObject(r.Data)))
				.Where(r => r != null).ToArray();
			
			var newServers = servers.Where(s =>
				existingRecords.All(r =>
					(r.Type is DnsRecordType.A && r.Name != $"{s.Subdomain}.{s.Domain}") ||
					r.Type == DnsRecordType.Srv)).ToArray();

			var changedServers = servers.Where(s => !newServers.Contains(s)).Where(server =>
					srvRecordData.All(r => r!.Target != $"{server.Subdomain}.{server.Domain}" || r.Port != server.Port))
				.ToArray();

			var unusedRecords = existingRecords.Where(record =>
				record.Type == DnsRecordType.A && servers.All(s => record.Name != $"{s.Subdomain}.{s.Domain}") ||
				record.Type == DnsRecordType.Srv && servers.All(s =>
					srvRecordData.First(r => record.Content.Split(" ")[2] == r!.Target)!.Target !=
					$"{s.Subdomain}.{s.Domain}")).ToArray();

			await Logging.Log(LogSeverity.Debug, "CF/Monitor", "Adding new servers...");

			foreach (var server in newServers)
			{
				await CreateServerRecords(server);
				await Task.Delay(1);
			}

			await Logging.Log(LogSeverity.Debug, "CF/Monitor", "Updating existing servers...");

			foreach (var server in changedServers)
			{
				await UpdateServerRecords(server,
					existingRecords.First(r =>
						r.Type == DnsRecordType.A && r.Name == $"{server.Subdomain}.{server.Domain}"),
					existingRecords.First(r =>
						r.Type == DnsRecordType.Srv &&
						r.Content.Split(" ")[2] == $"{server.Subdomain}.{server.Domain}"));
				await Task.Delay(1);
			}

			await Logging.Log(LogSeverity.Debug, "CF/Monitor", "Deleting unused records...");

			foreach (var record in unusedRecords)
				await _cloudFlareClient.Zones.DnsRecords.DeleteAsync(_zoneId, record.Id);

			await Logging.Log(LogSeverity.Debug, "CF/Monitor", $"Finished DNS refresh...");
			await Task.Delay(TimeSpan.FromSeconds(30));
		}

		await Logging.Log(LogSeverity.Error, "CF/Monitor", "CloudFlareClient is null. Terminating.");
	}

	private static async Task CreateServerRecords(Server server)
	{
		await Logging.Log(LogSeverity.Debug, "CF/DNS", $"Creating A Record for {server.Subdomain}.{server.Domain}");

		var aRecord = GenerateARecord(server);
		var aRecordResult = await _cloudFlareClient!.Zones.DnsRecords.AddAsync(_zoneId, aRecord);

		await Logging.Log(LogSeverity.Debug, "CF/DNS", $"Creating SRV for {server.Subdomain}.{server.Domain}");

		var srvRecord = GenerateSRVRecord(server);
		var content = new StringContent(JsonConvert.SerializeObject(srvRecord), Encoding.UTF8,
			"application/json");
		var srvRecordResult = await Api.Post($"https://api.cloudflare.com/client/v4/zones/{_zoneId}/dns_records",
			content, _cfApiKey);

		var aRecordSuccess = aRecordResult?.Success == true;
		if (aRecordResult is null || !aRecordSuccess)
		{
			await Logging.Log(LogSeverity.Warning, "CF/Monitor",
				$"Could not create A Record for: {server.Subdomain}.{server.Domain}");
		}

		if (srvRecordResult is null || !srvRecordResult.IsSuccessStatusCode)
		{
			await Logging.Log(LogSeverity.Error, "CF/Monitor",
				$"Could not create SRV Record for: {server.Subdomain}.{server.Domain}");
		}
	}

	private static async Task UpdateServerRecords(Server server, DnsRecord aRecord, DnsRecord srvRecord)
	{
		await Logging.Log(LogSeverity.Debug, "CF/DNS", $"Updating A Record for {server.Subdomain}.{server.Domain}");

		var newARecord = GenerateARecord(server);
		var modifiedARecord = new ModifiedDnsRecord()
		{
			Content = newARecord.Content,
			Name = newARecord.Name,
			Comment = newARecord.Comment,
			Priority = newARecord.Priority,
			Proxied = newARecord.Proxied,
			Tags = newARecord.Tags,
			Ttl = newARecord.Ttl,
			Type = newARecord.Type,
		};

		var aRecordResult = await _cloudFlareClient!.Zones.DnsRecords.UpdateAsync(_zoneId, aRecord.Id, modifiedARecord);
		if (aRecordResult is null || !aRecordResult.Success)
			await Logging.Log(LogSeverity.Error, "CF/DNS",
				$"Could not update A Record for: {server.Subdomain}.{server.Domain} ({string.Join(", ", aRecordResult?.Errors.Select(err => err.Code) ?? [])})");

		await Logging.Log(LogSeverity.Debug, "CF/DNS", $"Creating SRV Record for {server.Subdomain}.{server.Domain}");

		var newSrvRecord = GenerateSRVRecord(server);
		var content = new StringContent(JsonConvert.SerializeObject(newSrvRecord), Encoding.UTF8,
			"application/json");
		var srvRecordResult = await Api.Put(
			$"https://api.cloudflare.com/client/v4/zones/{_zoneId}/dns_records/{srvRecord.Id}",
			content, _cfApiKey);

		if (srvRecordResult is null || !srvRecordResult.IsSuccessStatusCode)
			await Logging.Log(LogSeverity.Error, "CF/DNS",
				$"Could not update SRV Record for: {server.Subdomain}.{server.Domain} ({srvRecordResult?.ReasonPhrase})");
	}

	private static async Task<Server[]> UpdateServerList()
	{
		await Logging.Log(LogSeverity.Debug, "CF/Monitor", $"Querying '{_panelUrl}/servers' with key '{_mlApiKey}'");

		var response = await Api.Get(_panelUrl + "/servers", _mlApiKey);
		if (response?.IsSuccessStatusCode ?? false)
		{
			var newServerList = await response.Content.ReadFromJsonAsync<Server[]>() ?? [];
			await Logging.Log(LogSeverity.Debug, "CF/Monitor", $"Found {newServerList.Length} servers");

			return newServerList;
		}

		await Logging.Log(LogSeverity.Warning, "CF/Monitor", "Could not reach minimal Pterodactyl API");
		return [new Server("CANCEL", -1, "CANCEL", "CANCEL")];
	}

	// ReSharper disable once InconsistentNaming
	private static dynamic GenerateSRVRecord(Server server)
	{
		var srvRecord = new
		{
			type = "SRV",
			name = $"_minecraft._tcp.{server.Subdomain}",
			data = new
			{
				priority = 0,
				weight = 5,
				port = server.Port.ToString(),
				target = $"{server.Subdomain}.{server.Domain}"
			},
			ttl = 1,
			proxied = false,
			comment = "Generated by PTCF",
		};

		return srvRecord;
	}

	private static NewDnsRecord GenerateARecord(Server server)
	{
		var aRecord = new NewDnsRecord()
		{
			Type = DnsRecordType.A,
			Name = server.Subdomain,
			Content = server.IpAddress,
			Ttl = 1,
			Proxied = false,
			Comment = "Generated by PTCF"
		};

		return aRecord;
	}

	private record SrvRecordData(int Port, int Priority, int Weight, string Target);
}